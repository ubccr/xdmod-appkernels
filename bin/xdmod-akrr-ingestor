#!/usr/bin/env php
<?php
/**
 * Script for querying AKRR and ingesting the results into the Open
 * XDMoD data warehouse.  Queries the deployment engine, parses the
 * results, and imports them into the data warehouse.
 *
 * @package OpenXdmod\AppKernels
 *
 * @author Steve Gallo
 * @author Amin Ghadersohi
 * @author Tom Yearke
 * @author Nikolay Simakov
 * @author Jeffrey T. Palmer <jtpalmer@buffalo.edu>
 */

require_once __DIR__ . '/../configuration/linker.php';

use CCR\Log;
use AppKernel\AppKernelIngestor;

/**
 * Log level determined by "verbose", "debug" and "quiet".
 *
 * @var int
 */
$logLevel = -1;

$ingestingConfig = [
    /** @var bool Operate in dry-run mode.  Query and parse files but do not update the database in any way. */
    'dryRunMode' => false,
    /** @var int|null Ingestion start timestamp. */
    'startTimestamp' => null,
    /** @var int|null Ingestion end timestamp. */
    'endTimestamp' => null,
    /** @var string|null A time period to use for ingestion. */
    'sinceLastLoadTime' => null,
    /** @var int Offset the ingesting starting date by "o" days. */
    'offsetStartTimestampBy' => 0,
    /** @var string|null If set, the resource to ingest. */
    'restrictToAppKernel' => null,
    /** @var string|null If set, the app kernel to ingest. */
    'restrictToResource' => null,
    /** @var bool Remove ingested data for given time period prior to reingesting it. */
    'removeIngestedData' => false,
    /** @var bool Use replace statements to replace duplicate metric/intance data. Default behavior is to ignore duplicates. */
    'replace' => false,
    /** @var bool Recalculate the controls and control intervals */
    'recalculateControls' => false,
    /** @var integer Control Interval Size for initial control regions*/
    'controlIntervalSize' => 20
];

/**
 * Parse command line options.
 *
 * @var array
 */
$options = array(
    'h' => 'help',

    // Re-calculate running averages, control and control intervals
    'y' => 're-calculate-controls',

    // Test or dry-run Mode
    'd' => 'dry-run',

    // Force replace all instance/metric data
    'r' => 'replace',

    // Start date (and optional time) for import
    's:' => 'start:',

    // End date (and optional time) for import
    'e:' => 'end:',

    // Import data using specified time period
    'l:' => 'since-last:',

    // Process only app kernels containing this string
    'k:' => 'kernel',

    // Process only the specified resource
    'R:' => 'resource',

    // Verbose mode.
    'v' => 'verbose',

    // Debug mode.
    '' => 'debug',

    // Quiet mode.
    'q' => 'quiet',

    // Remove ingested data for given time period prior to reingesting it
    'm' => 'remove',

    // offset the ingesting starting date by o days
    'o:' => 'offset:',

    // Control Interval Size for initial control regions
    'i:' => 'control-interval:',
);

$args = getopt(implode('', array_keys($options)), $options);

foreach ($args as $arg => $value) {
    switch ($arg) {
        case 'y':
        case 're-calculate-controls':
            $ingestingConfig['recalculateControls'] = true;
            break;
        case 'e':
        case 'end':
            $value = trim($value);
            if (!preg_match("/^[0-9]+$/", $value)) {
                // End of the day
                $ingestingConfig['endTimestamp'] = strtotime($value) + 86399;
            } else {
                $ingestingConfig['endTimestamp'] = $value;
            }
            break;
        case 'd':
        case 'dry-run':
            $dryRunMode = true;
            $logLevel = max($logLevel, Log::INFO);
            break;
        case 'r':
        case 'replace':
            $ingestingConfig['replace'] = true;
            break;
        case 'h':
        case 'help':
            usage_and_exit();
            break;
        case 'k':
        case 'kernel':
            $ingestingConfig['restrictToAppKernel'] = $value;
            break;
        case 'i':
        case 'control-interval':
            $ingestingConfig['controlIntervalSize'] = intval($value);
            break;
        case 'l':
        case 'since-last':
            $ingestingConfig['sinceLastLoadTime'] = $value;
            break;
        case 'R':
        case 'resource':
            $ingestingConfig['restrictToResource'] = $value;
            break;
        case 's':
        case 'start':
            $value = trim($value);
            if (!preg_match("/^[0-9]+$/", $value)) {
                $ingestingConfig['startTimestamp'] = strtotime($value);
            } else {
                $ingestingConfig['startTimestamp'] = $value;
            }
            break;
        case 'm':
        case 'remove':
            $ingestingConfig['removeIngestedData'] = true;
            break;
        case 'o':
        case 'offset':
            $ingestingConfig['offsetStartTimestampBy'] = intval($value) * 3600 * 24;
            break;
        case 'q':
        case 'quiet':
            $logLevel = max($logLevel, Log::WARNING);
            break;
        case 'v':
        case 'verbose':
            $logLevel = max($logLevel, Log::INFO);
            break;
        case 'debug':
            $logLevel = max($logLevel, Log::DEBUG);
            break;
        default:
            break;
    }
}

// The "load since last" flag or start/end flags must be specified.  If
// start/end is specified only one is required.
if ($ingestingConfig['sinceLastLoadTime'] !== null) {
    if (!array_key_exists($ingestingConfig['sinceLastLoadTime'], AppKernelIngestor::$validTimeframes)) {
        usage_and_exit("Invalid timeframe for -l option.  Valid timeframes are: " . implode(", ",
                array_keys(AppKernelIngestor::$validTimeframes)));
    }
} else {
    if ($ingestingConfig['startTimestamp'] === null && $ingestingConfig['endTimestamp'] === null) {
        usage_and_exit("Time period not specified");
    } elseif ($ingestingConfig['startTimestamp'] !== null && !preg_match("/^[0-9]+$/",
            $ingestingConfig['startTimestamp'])) {
        usage_and_exit("Start time could not be parsed");
    } elseif ($ingestingConfig['endTimestamp'] !== null && !preg_match("/^[0-9]+$/",
            $ingestingConfig['endTimestamp'])) {
        usage_and_exit("End time is not a unix timestamp");
    }
}

if ($logLevel === -1) {
    $logLevel = Log::NOTICE;
}

$conf = array(
    'file' => false,
    'mail' => false,
    'consoleLogLevel' => $logLevel,
);
$logger = Log::factory('xdmod-akrr', $conf);

// Run Ingestion
try {
    $appKernelIngestor = new AppKernelIngestor($logger, $config = $ingestingConfig);
    $success = $appKernelIngestor->run();
} catch (Exception $e) {
    $logger->crit(array(
        'message' => "Error in Appkernel Ingestion: " . $e->getMessage(),
        'stacktrace' => $e->getTraceAsString(),
    ));
    cleanup_and_exit(1);
}


if ($success) {
    cleanup_and_exit();
} else {
    cleanup_and_exit(1);
}


/**
 * Display usage text and exit.
 *
 * @param string $msg Optional message.
 */
function usage_and_exit($msg = null)
{
    global $validTimeframes;

    if (null !== $msg) {
        echo "\n$msg\n";
    }

    $timeframes = implode(', ', array_keys($validTimeframes));

    echo <<<"EOF"

Usage: xdmod-akrr-ingestor [[-l *timeframe*]|[-s *start-date*] [-e *end-date*]]

    -h, --help
        Display this help.

    -v, --verbose
        Output info level logging.

    --debug
        Output debug level logging.

    -q, --quiet
        Output warning level logging.

    -d, --dry-run
        Run in dry-run mode.  Do not update database.

    -r, --replace
        Force replacement of all instance/metric data.  Default
        behavior is to ignore duplicates.

    -m, --remove
         Remove ingested data for given time period prior to reingesting
         it.

    -y, --re-calculate-controls
        Re-calculate the running average, control values and control
        intervals.

    -l, --since-last *timeframe*
        Import data for time period.
        Valid timeframes are $timeframes.

    -s, --start *start-date*
        Start timestamp or date for import.

    -e, --end *end-date*
        End timestamp or date for import.

    -o, --offset *days*
        Offset the ingesting starting date by *days* (previous) days.

    -k, --kernel *app-kernel*
        Ingest only app kernels matching this string.

    -R, --resource *resource-name*
        Ingest app kernels for this resource only.

    -i, --control-interval *control interval size*
        Control interval size for new control regions. Default: 20.

If a start time is specified without an end time then data will be
loaded from the start to the current time.  If an end time is specified
without a start time then data will be loaded from the beginning to the
end time.

Examples:

Ingest all application kernels since the last load and calculate control
regions.

    xdmod-akrr-ingestor -v -c -l load

EOF;

    cleanup_and_exit(1);
}

/**
 * Clean up and exit.
 *
 * @param int $exitCode Optional exit code.
 */

function cleanup_and_exit($exitCode = 0)
{
    global $appKernelIngestor, $logger;

    if ($appKernelIngestor !== null) {
        unset($appKernelIngestor);
    }

    if (isset($logger)) {
       $logger->close();
    }

    exit($exitCode);
}
